window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "GUI", "modulename": "GUI", "kind": "module", "doc": "<p>Module that draws the GUI to the canvas</p>\n"}, {"fullname": "GUI.GUI", "modulename": "GUI", "qualname": "GUI", "kind": "class", "doc": "<p>A class representing the graphical user interface for the MS Paint Clone.</p>\n\n<p>This class provides tools and buttons for interacting with the canvas and selecting colors.</p>\n\n<p>Attributes:\n    eraser (ToolButton): The eraser tool button.\n    fill (ToolButton): The fill tool button.\n    panning (ToolButton): The panning tool button.\n    pencil (ToolButton): The pencil tool button.\n    brush (ToolButton): The brush tool button.\n    eyedropper (ToolButton): The eyedropper tool button.</p>\n\n<pre><code>red (ColorButton): The red color button.\nyellow (ColorButton): The yellow color button.\ngreen (ColorButton): The green color button.\nteal (ColorButton): The teal color button.\nblue (ColorButton): The blue color button.\npink (ColorButton): The pink color button.\nblack (ColorButton): The black color button.\n\nselected_color (ColorButton): The currently selected color button.\n</code></pre>\n"}, {"fullname": "GUI.GUI.__init__", "modulename": "GUI", "qualname": "GUI.__init__", "kind": "function", "doc": "<p>Initialize the GUI by creating the color and tool buttons.</p>\n\n<p>This method sets up the GUI by creating instances of the ToolButton\nand ColorButton classes for each tool and color.\nIt also sets the initial selected tool to be pencil and color to be black.</p>\n\n<p>Args:\n    screen (pygame.Surface): The Pygame screen surface on which the GUI will be drawn.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span></span>)</span>"}, {"fullname": "GUI.GUI.ToolButton", "modulename": "GUI", "qualname": "GUI.ToolButton", "kind": "class", "doc": "<p>A class representing a tool button in the GUI.</p>\n\n<p>Attributes:\n    STATIC_SELECTED (str): The currently selected tool.\n    state (bool): Flag indicating if the button is in an active state.\n    clicked (bool): Flag indicating if the button has been clicked.\n    activeImage (pygame.Surface): The active image for the button.\n    inactiveImage (pygame.Surface): The inactive image for the button.\n    screen (pygame.Surface): The Pygame screen surface.\n    mouse_was_pressed (bool): Flag indicating if the mouse button was pressed.\n    image (pygame.Surface): The current image of the button.\n    name (str): The name of the tool.\n    rect (pygame.Rect): The rectangle representing the button's position and size.\n    x (int): The X-coordinate of the button.\n    y (int): The Y-coordinate of the button.</p>\n"}, {"fullname": "GUI.GUI.ToolButton.__init__", "modulename": "GUI", "qualname": "GUI.ToolButton.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">inactive</span>, </span><span class=\"param\"><span class=\"n\">active</span>, </span><span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">name</span></span>)</span>"}, {"fullname": "GUI.GUI.ToolButton.STATIC_SELECTED", "modulename": "GUI", "qualname": "GUI.ToolButton.STATIC_SELECTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pencil&#x27;"}, {"fullname": "GUI.GUI.ToolButton.state", "modulename": "GUI", "qualname": "GUI.ToolButton.state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.clicked", "modulename": "GUI", "qualname": "GUI.ToolButton.clicked", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.active_image", "modulename": "GUI", "qualname": "GUI.ToolButton.active_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.inactive_image", "modulename": "GUI", "qualname": "GUI.ToolButton.inactive_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.screen", "modulename": "GUI", "qualname": "GUI.ToolButton.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.mouse_was_pressed", "modulename": "GUI", "qualname": "GUI.ToolButton.mouse_was_pressed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.image", "modulename": "GUI", "qualname": "GUI.ToolButton.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.name", "modulename": "GUI", "qualname": "GUI.ToolButton.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.rect", "modulename": "GUI", "qualname": "GUI.ToolButton.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.x", "modulename": "GUI", "qualname": "GUI.ToolButton.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ToolButton.y", "modulename": "GUI", "qualname": "GUI.ToolButton.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ColorButton", "modulename": "GUI", "qualname": "GUI.ColorButton", "kind": "class", "doc": "<p>A class representing a color button in the GUI.</p>\n\n<p>This class defines a button for selecting colors.</p>\n\n<p>Attributes:\nSTATIC_SELECTED (tuple): The currently selected color as an RGB tuple.\nstate (bool): Flag indicating if the button is in an active state.\nscreen (pygame.Surface): The Pygame screen surface.\nmouse_was_pressed (bool): Flag indicating if the mouse button was pressed.\ncolor (tuple): The color associated with the button.\nrect (pygame.Rect): The rectangle representing the button's position and size.</p>\n"}, {"fullname": "GUI.GUI.ColorButton.__init__", "modulename": "GUI", "qualname": "GUI.ColorButton.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">length</span>, </span><span class=\"param\"><span class=\"n\">width</span></span>)</span>"}, {"fullname": "GUI.GUI.ColorButton.STATIC_SELECTED", "modulename": "GUI", "qualname": "GUI.ColorButton.STATIC_SELECTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 0, 0)"}, {"fullname": "GUI.GUI.ColorButton.state", "modulename": "GUI", "qualname": "GUI.ColorButton.state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ColorButton.screen", "modulename": "GUI", "qualname": "GUI.ColorButton.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ColorButton.mouse_was_pressed", "modulename": "GUI", "qualname": "GUI.ColorButton.mouse_was_pressed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ColorButton.color", "modulename": "GUI", "qualname": "GUI.ColorButton.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.ColorButton.rect", "modulename": "GUI", "qualname": "GUI.ColorButton.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.screen", "modulename": "GUI", "qualname": "GUI.screen", "kind": "variable", "doc": "<p>The screen where the GUI is being drawn on</p>\n"}, {"fullname": "GUI.GUI.eraser", "modulename": "GUI", "qualname": "GUI.eraser", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.fill", "modulename": "GUI", "qualname": "GUI.fill", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.panning", "modulename": "GUI", "qualname": "GUI.panning", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.pencil", "modulename": "GUI", "qualname": "GUI.pencil", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.brush", "modulename": "GUI", "qualname": "GUI.brush", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.eyedroppper", "modulename": "GUI", "qualname": "GUI.eyedroppper", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.red", "modulename": "GUI", "qualname": "GUI.red", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.yellow", "modulename": "GUI", "qualname": "GUI.yellow", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.green", "modulename": "GUI", "qualname": "GUI.green", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.teal", "modulename": "GUI", "qualname": "GUI.teal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.blue", "modulename": "GUI", "qualname": "GUI.blue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.pink", "modulename": "GUI", "qualname": "GUI.pink", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.black", "modulename": "GUI", "qualname": "GUI.black", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.selected_color", "modulename": "GUI", "qualname": "GUI.selected_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "GUI.GUI.draw", "modulename": "GUI", "qualname": "GUI.draw", "kind": "function", "doc": "<p>Draws the GUI on the screen.</p>\n\n<p>This method is responsible for drawing the GUI on the screen.\nIt first draws a grey bar and blue bar on top,\nthen it draws each tool button and color button on the GUI.\nFinally, it updates the selected color and draws it on the GUI.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "GUI.GUI.change_selected_color", "modulename": "GUI", "qualname": "GUI.change_selected_color", "kind": "function", "doc": "<p>Changes the currently selected color.</p>\n\n<p>This method updates the static variable STATIC_SELECTED of the ColorButton class\nto the new color provided as an argument. This effectively changes the currently\nselected color in the GUI.</p>\n\n<p>Args:\n    new_color (tuple): The new color to be selected, represented as an RGB tuple.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "GUI.GUI.get_selected_tool", "modulename": "GUI", "qualname": "GUI.get_selected_tool", "kind": "function", "doc": "<p>Retrieves the currently selected tool.</p>\n\n<p>This method returns the static variable STATIC_SELECTED of the ToolButton class,\nwhich represents the currently selected tool in the GUI.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    str: The name of the currently selected tool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "GUI.GUI.get_selected_color", "modulename": "GUI", "qualname": "GUI.get_selected_color", "kind": "function", "doc": "<p>Retrieves the currently selected color.</p>\n\n<p>This method returns the static variable STATIC_SELECTED of the ColorButton class,\nwhich represents the currently selected color in the GUI.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    tuple: The RGB tuple of the currently selected color.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main", "modulename": "main", "kind": "module", "doc": "<p>Module that runs the whole program</p>\n"}, {"fullname": "main.screen", "modulename": "main", "qualname": "screen", "kind": "variable", "doc": "<p>The main window for the program</p>\n", "default_value": "&lt;Surface(Dead Display)&gt;"}, {"fullname": "main.RUN_PROGRAM", "modulename": "main", "qualname": "RUN_PROGRAM", "kind": "variable", "doc": "<p>A flag to indicate whether the program should be ran</p>\n", "default_value": "False"}, {"fullname": "main.DIM0_SIZE", "modulename": "main", "qualname": "DIM0_SIZE", "kind": "variable", "doc": "<p>Variable that holds window dimension</p>\n", "default_value": "512"}, {"fullname": "main.DIM1_SIZE", "modulename": "main", "qualname": "DIM1_SIZE", "kind": "variable", "doc": "<p>Variable that holds window dimension</p>\n", "default_value": "512"}, {"fullname": "main.Canvas", "modulename": "main", "qualname": "Canvas", "kind": "class", "doc": "<p>A class representing a drawing canvas</p>\n\n<p>Attributes:\n    width (int): The width of the canvas.\n    height (int): The height of the canvas.\n    surface (pygame.Surface): The drawing surface.\n    x_offset (int): The X-axis offset for the canvas.\n    y_offset (int): The Y-axis offset for the canvas.\n    undrawn (bool): A flag indicating if the canvas needs to be redrawn.\n    scale (float): The scaling factor for the canvas.</p>\n"}, {"fullname": "main.Canvas.__init__", "modulename": "main", "qualname": "Canvas.__init__", "kind": "function", "doc": "<p>Initialize a new Canvas.</p>\n\n<p>Args:\n    width (int): The width of the canvas.\n    height (int): The height of the canvas.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">512</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">512</span></span>)</span>"}, {"fullname": "main.Canvas.width", "modulename": "main", "qualname": "Canvas.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.Canvas.height", "modulename": "main", "qualname": "Canvas.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.Canvas.surface", "modulename": "main", "qualname": "Canvas.surface", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.Canvas.offset", "modulename": "main", "qualname": "Canvas.offset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.Canvas.undrawn", "modulename": "main", "qualname": "Canvas.undrawn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.Canvas.scale", "modulename": "main", "qualname": "Canvas.scale", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "main.Canvas.draw", "modulename": "main", "qualname": "Canvas.draw", "kind": "function", "doc": "<p>Draws the canvas on the provided screen.</p>\n\n<p>This method first fills the entire screen with a gray color. Then,\nit scales the surface of the canvasaccording to the current scale\nfactor and blits it onto the provided screen at the current offset.</p>\n\n<p>Args:\n    window_screen (pygame.Surface): The Pygame screen\n    surface on which the canvas will be drawn.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window_screen</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.myCanvas", "modulename": "main", "qualname": "myCanvas", "kind": "variable", "doc": "<p>Variable for main.py's canvas</p>\n", "default_value": "&lt;main.Canvas object&gt;"}, {"fullname": "main.main_gui", "modulename": "main", "qualname": "main_gui", "kind": "variable", "doc": "<p>Variable for main.py's GUI object</p>\n", "default_value": "&lt;GUI.GUI object&gt;"}, {"fullname": "main.fill_color", "modulename": "main", "qualname": "fill_color", "kind": "variable", "doc": "<p>Variable used to color the screen white</p>\n", "default_value": "(255, 255, 255)"}, {"fullname": "main.tool", "modulename": "main", "qualname": "tool", "kind": "variable", "doc": "<p>Variable to run functions from the Tool object</p>\n", "default_value": "&lt;Tools.Tool object&gt;"}, {"fullname": "main.shortcut", "modulename": "main", "qualname": "shortcut", "kind": "variable", "doc": "<p>Variable to run functions from the Shortcut object</p>\n", "default_value": "&lt;undo_redo.shortcut object&gt;"}, {"fullname": "main.image_handler", "modulename": "main", "qualname": "image_handler", "kind": "variable", "doc": "<p>Variable to run functions from the ImageHandler object</p>\n", "default_value": "&lt;image_handler.ImageHandler object&gt;"}, {"fullname": "Tools", "modulename": "Tools", "kind": "module", "doc": "<p>Module that adds functionality to each of the tools</p>\n"}, {"fullname": "Tools.Tool", "modulename": "Tools", "qualname": "Tool", "kind": "class", "doc": "<p>A class that represents a collection of drawing tools for a canvas.</p>\n\n<p>This class contains several nested classes, each representing a different drawing tool.\nThe class establishes instances of each tool so it can swtich and use a selected tools methods.\nAttributes:\n    pencil_object (Pencil): An instance of the Pencil tool.\n    eraser_object (Eraser): An instance of the Eraser tool.\n    fill_object (Fill): An instance of the Fill tool.\n    panning_object (Panning): An instance of the Panning tool.\n    brush_object (Brush): An instance of the Brush tool.\n    eyedropper_object (Eyedropper): An instance of the Eyedropper tool.\n    tool_dictionary (dict): A dictionary mapping tool names to their corresponding instances.\n    current_tool (Tool): The currently selected tool.</p>\n"}, {"fullname": "Tools.Tool.Pencil", "modulename": "Tools", "qualname": "Tool.Pencil", "kind": "class", "doc": "<p>A class representing a pencil tool for drawing on the canvas.</p>\n\n<p>A tool used to draw onto the canvas with thin lines</p>\n\n<p>Attributes:\n    active (bool): Flag indicating if the tool is currently selected.\n    drawing (bool): Flag indicating if the tool is drawing pixels on the canvas.\n    previous_pos (tuple): The previous mouse cursor position.</p>\n"}, {"fullname": "Tools.Tool.Pencil.active", "modulename": "Tools", "qualname": "Tool.Pencil.active", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Pencil.drawing", "modulename": "Tools", "qualname": "Tool.Pencil.drawing", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Pencil.previous_pos", "modulename": "Tools", "qualname": "Tool.Pencil.previous_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Brush", "modulename": "Tools", "qualname": "Tool.Brush", "kind": "class", "doc": "<p>A class representing a brush tool for drawing on the canvas.</p>\n\n<p>A tool used to draw onto the canvas with a size that is adjustable via the scroll wheel</p>\n\n<p>Attributes:\n    active (bool): Flag indicating if the tool is currently selected.\n    drawing (bool): Flag indicating if the tool is drawing pixels on the canvas.\n    size (int): Number that represents the size of the brush\n    previous_pos (tuple): The previous mouse cursor position.</p>\n"}, {"fullname": "Tools.Tool.Brush.active", "modulename": "Tools", "qualname": "Tool.Brush.active", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Brush.drawing", "modulename": "Tools", "qualname": "Tool.Brush.drawing", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Brush.size", "modulename": "Tools", "qualname": "Tool.Brush.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Brush.previous_pos", "modulename": "Tools", "qualname": "Tool.Brush.previous_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Eraser", "modulename": "Tools", "qualname": "Tool.Eraser", "kind": "class", "doc": "<p>A class representing an eraser tool for erasing on the canvas.</p>\n\n<p>The eraser allows users to erase parts of their drawing on the canvas.\nBasically does it by drawing onto the canvas in white.</p>\n\n<p>Attributes:\n    active (bool): Flag indicating if the tool is currently selected.\n    drawing (bool): Flag indicating if the tool is erasing pixels on the canvas.\n    size (int): Number that represents the size of the eraser.\n    previous_pos (tuple): The previous mouse cursor position.\n    color (tuple): The color of the eraser, always set to white (255, 255, 255).</p>\n"}, {"fullname": "Tools.Tool.Eraser.active", "modulename": "Tools", "qualname": "Tool.Eraser.active", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Eraser.drawing", "modulename": "Tools", "qualname": "Tool.Eraser.drawing", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Eraser.size", "modulename": "Tools", "qualname": "Tool.Eraser.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Eraser.previous_pos", "modulename": "Tools", "qualname": "Tool.Eraser.previous_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Eraser.color", "modulename": "Tools", "qualname": "Tool.Eraser.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Fill", "modulename": "Tools", "qualname": "Tool.Fill", "kind": "class", "doc": "<p>A class representing a fill tool that colors closed shapes on the canvas.</p>\n\n<p>The fill tool allows the user to fill a closed area on the canvas with a specific color.</p>\n\n<p>Attributes:\n    fill (bool): Flag indicating if the fill operation is currently active.\n    visited_pixels (set): A set storing the pixels that have been visited\n    during the fill operation.</p>\n"}, {"fullname": "Tools.Tool.Fill.fill", "modulename": "Tools", "qualname": "Tool.Fill.fill", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Fill.visited_pixels", "modulename": "Tools", "qualname": "Tool.Fill.visited_pixels", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Fill.fill_pixel", "modulename": "Tools", "qualname": "Tool.Fill.fill_pixel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_position</span>, </span><span class=\"param\"><span class=\"n\">canvas_obj</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Tools.Tool.Panning", "modulename": "Tools", "qualname": "Tool.Panning", "kind": "class", "doc": "<p>A class that represents the Panning tool, for panning around the canvas.</p>\n\n<p>Attributes:\n    active (bool): Flag indicating if the tool is currently selected.\n    drawing (bool): Flag indicating if the tool is currently panning around.\n    previous_pos (tuple): The previous mouse cursor position.\n    previous_offset (tuple): The previous canvas offset.</p>\n"}, {"fullname": "Tools.Tool.Panning.active", "modulename": "Tools", "qualname": "Tool.Panning.active", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Panning.panning", "modulename": "Tools", "qualname": "Tool.Panning.panning", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Panning.previous_pos", "modulename": "Tools", "qualname": "Tool.Panning.previous_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Panning.previous_offset", "modulename": "Tools", "qualname": "Tool.Panning.previous_offset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Eyedropper", "modulename": "Tools", "qualname": "Tool.Eyedropper", "kind": "class", "doc": "<p>A class representing an eyedropper tool for selecting colors on the canvas.</p>\n\n<p>The eyedropper tool allows the user to select a color from the canvas.\nThe selected color can then be used by other tools.</p>\n\n<p>Attributes:\n    eyedropper (bool): Flag indicating if the eyedropper operation is currently active.\n    color (tuple): The color selected by the eyedropper tool.</p>\n"}, {"fullname": "Tools.Tool.Eyedropper.eyedropper", "modulename": "Tools", "qualname": "Tool.Eyedropper.eyedropper", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.Eyedropper.color", "modulename": "Tools", "qualname": "Tool.Eyedropper.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Tools.Tool.pencil_object", "modulename": "Tools", "qualname": "Tool.pencil_object", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Tools.Tool.Pencil object&gt;"}, {"fullname": "Tools.Tool.eraser_object", "modulename": "Tools", "qualname": "Tool.eraser_object", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Tools.Tool.Eraser object&gt;"}, {"fullname": "Tools.Tool.fill_object", "modulename": "Tools", "qualname": "Tool.fill_object", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Tools.Tool.Fill object&gt;"}, {"fullname": "Tools.Tool.panning_object", "modulename": "Tools", "qualname": "Tool.panning_object", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Tools.Tool.Panning object&gt;"}, {"fullname": "Tools.Tool.brush_object", "modulename": "Tools", "qualname": "Tool.brush_object", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Tools.Tool.Brush object&gt;"}, {"fullname": "Tools.Tool.eyedropper_object", "modulename": "Tools", "qualname": "Tool.eyedropper_object", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Tools.Tool.Eyedropper object&gt;"}, {"fullname": "Tools.Tool.tool_dictionary", "modulename": "Tools", "qualname": "Tool.tool_dictionary", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;pencil&#x27;: &lt;Tools.Tool.Pencil object&gt;, &#x27;eraser&#x27;: &lt;Tools.Tool.Eraser object&gt;, &#x27;fill&#x27;: &lt;Tools.Tool.Fill object&gt;, &#x27;panning&#x27;: &lt;Tools.Tool.Panning object&gt;, &#x27;brush&#x27;: &lt;Tools.Tool.Brush object&gt;, &#x27;eyedropper&#x27;: &lt;Tools.Tool.Eyedropper object&gt;}"}, {"fullname": "Tools.Tool.current_tool", "modulename": "Tools", "qualname": "Tool.current_tool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "undo_redo", "modulename": "undo_redo", "kind": "module", "doc": "<p>Module that adds functionality to undo /redo</p>\n"}, {"fullname": "undo_redo.shortcut", "modulename": "undo_redo", "qualname": "shortcut", "kind": "class", "doc": "<p>A class that handles undo and redo operations for the canvas.</p>\n\n<p>This class keeps track of all changes made to the canvas within the\ncanvas_stack directory and allows the user to undo or redo these changes.</p>\n\n<p>Attributes:\n    counter (int): A counter that keeps track of the current image displayed\n    size (int): The total number of saved images in canvas_stack directory\n    check (bool): A flag indicating whether the current tool can make\n    changes that should be tracked.</p>\n"}, {"fullname": "undo_redo.shortcut.__init__", "modulename": "undo_redo", "qualname": "shortcut.__init__", "kind": "function", "doc": "<p>Initialize the shortcut class.</p>\n\n<p>This method sets up the shortcut class by saving the initial default state of the canvas.</p>\n\n<p>Args:\n    canvas_obj (Canvas): The canvas object that the shortcut class will be tracking.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">canvas_obj</span></span>)</span>"}, {"fullname": "undo_redo.shortcut.counter", "modulename": "undo_redo", "qualname": "shortcut.counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "undo_redo.shortcut.size", "modulename": "undo_redo", "qualname": "shortcut.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "undo_redo.shortcut.check", "modulename": "undo_redo", "qualname": "shortcut.check", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "undo_redo.shortcut.check_if_viable", "modulename": "undo_redo", "qualname": "shortcut.check_if_viable", "kind": "function", "doc": "<p>Checks if the current tool can make changes that should be saved.</p>\n\n<p>This method checks if the current tool is appropriate tool is selected\n(pencil,brush,eraser,fill),\nif the mouse isn't on the GUI, and if the left mouse button was pressed.</p>\n\n<p>If all the above is true, self.check is set to true, otherwise it is false\nArgs:\n    current_tool (str): The name of the current tool.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_tool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "undo_redo.shortcut.save", "modulename": "undo_redo", "qualname": "shortcut.save", "kind": "function", "doc": "<p>Saves the current state of the canvas into canvas_stack directory.</p>\n\n<p>This method saves the current state of the canvas into canvas_stack directory.\nIf a change has been made that should be tracked/self.check is true.</p>\n\n<p>It also deletes all images ahead of it, in the case of a user undoing and saving</p>\n\n<p>Args:\n    canvas_obj (Canvas): The canvas object that the shortcut class is tracking.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">canvas_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "undo_redo.shortcut.undo", "modulename": "undo_redo", "qualname": "shortcut.undo", "kind": "function", "doc": "<p>Undoes the last change made to the canvas.</p>\n\n<p>This method undoes the last change made to the canvas, if there is a change to undo.\nIt does this by loading the last image within the canvas_stack folder</p>\n\n<p>Args:\n    canvas_obj (Canvas): The canvas object that the shortcut class is tracking.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">canvas_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "undo_redo.shortcut.redo", "modulename": "undo_redo", "qualname": "shortcut.redo", "kind": "function", "doc": "<p>Redoes the last change that was undone.</p>\n\n<p>This method redoes the last change that was undone, if there is a change to redo.\nIt does this by iterating counter by 1 to get the next image in the stack</p>\n\n<p>Args:\n    canvas_obj (Canvas): The canvas object that the shortcut class is tracking.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">canvas_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "undo_redo.shortcut.clearTemp", "modulename": "undo_redo", "qualname": "shortcut.clearTemp", "kind": "function", "doc": "<p>Clears all temporary images.</p>\n\n<p>This method deletes all temporary images that were saved for undo/redo operations\nwihtin the canvas_stack directory.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "image_handler", "modulename": "image_handler", "kind": "module", "doc": "<p>Module that helps save/load to the file explorer</p>\n"}, {"fullname": "image_handler.ImageHandler", "modulename": "image_handler", "qualname": "ImageHandler", "kind": "class", "doc": "<p>A class that handles loading and saving images for the canvas.</p>\n\n<p>This class provides methods to load an image from a file and\ndraw it onto the canvas, and to save the current state of the\ncanvas to an image file.</p>\n\n<p>Attributes:\n    canvas (Canvas): The canvas object that the ImageHandler will be working with.</p>\n"}, {"fullname": "image_handler.ImageHandler.__init__", "modulename": "image_handler", "qualname": "ImageHandler.__init__", "kind": "function", "doc": "<p>Initialize the ImageHandler class.</p>\n\n<p>This method sets up the ImageHandler class by storing a reference to the canvas\nthat it will be working with.</p>\n\n<p>Args:\n    canvas (Canvas): The canvas object that the ImageHandler will be working with.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">canvas</span></span>)</span>"}, {"fullname": "image_handler.ImageHandler.canvas", "modulename": "image_handler", "qualname": "ImageHandler.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "image_handler.ImageHandler.load_image", "modulename": "image_handler", "qualname": "ImageHandler.load_image", "kind": "function", "doc": "<p>Loads an image from a file and draws it onto the canvas.</p>\n\n<p>This method opens a file dialog for the user to select an image file.\nIf a file is selected, it loads the image and draws it onto the canvas.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "image_handler.ImageHandler.save_image", "modulename": "image_handler", "qualname": "ImageHandler.save_image", "kind": "function", "doc": "<p>Saves the current state of the canvas to an image file.</p>\n\n<p>This method opens a file dialog for the user to select a location and\nfile name to save the current state of the canvas as an image file.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();